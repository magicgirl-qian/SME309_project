# 工作日志
# 12.7
之前看了《超标量处理器设计》inst cache部分，觉得现有instrom\datarom\dataram应该换成BRAM，这样接口应该方便一点。
BRAM需要.coe初始化，没找到可用的程序，自己学习.hex文件格式之后瞎鸡巴写了一个，不过只能用于这门课的样例（事先知道指令数量和起始地址）。
晚上拿lab3测试了一下，发现老是出0，冥思苦想半天想起IP的读都是同步的，单周期处理器测试不了。于是催队友赶紧写流水线
# 12.8
学习AXI接口，发现ID可以支持乱序响应，正合我意（乱序写回）
BRAM有AXI4与AXI4 LITE两种，LITE没有突发传输的接口，所以用AXI4
学长认为Inst_rom还是用native
产生想法：把data_rom与data_ram合并，如果指令尝试写rom就报异常。地址取{[11],[8:2]}。
疑问：为啥可读地址起始于0x0000_0800而不是0x0000_0400?//已解决，单纯留出冗余
还是基础太差，先看书吧，等cache想法完善了再写这部分
# 12.9 无所事事
# 12.10 无所事事
# 12.11
初探cache，发现一个笑话：正常的CPU用KB级的cache对应MB级的内存，结果本次作业要求用跟内存一样大的cache
新问题：多大的cache可以满足KB级的memory?我觉得这不是一个线性关系
既然cache变小了，那性能可以拉满，用全相联+LRU，真双端口，要不要流水线待定。
# 12.12 无所事事
问题：cache用双端口，BRAM用什么端口（AXI，真双，伪双，单）
# 12.13
我们来整理一下思路：
3C
  Compulsory--prefetching
  Capacity--（不管）
  Conflict--victim cache 
其他：流水线，write buffer
并行串行：并行少一周期但时钟频率低，用并行。//或者写串行2周期读一周期（读需判断数据是否在写流水中）
# 12.14
原本以为cache就要收尾了，结果又陷入了苦战
龙芯杯开源代码好多SystemVerilog\Chisel看不懂，Verilog也看不懂（他们太强啦！）
有趣的是在github上搜prefetch结果搜到一堆伊利诺伊大学香槟分校的ECE411 project，原来洋大人也这么强(orz
知乎上说prefetch是大学问，看了《the primer of hardware prefetching》也只是入门，要用AI拿海量数据跑
计划先研究HITSZ同学的ultraMIPS,特别是咋(替代)prefetch
